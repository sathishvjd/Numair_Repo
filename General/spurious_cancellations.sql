/*
 Summary:
 Find spurious transactions based on device category to understand if the rates vary significantly between devices
 For mobile apps

 */

/* Main data structure to identify fake transfers Appends previous transaction data
to a record (based on profile id and ordered by creation date)
*/



WITH PREVIOUS_DATA AS (SELECT  TRANSFER.*,AMP.*,RAS.INVOICE_VALUE_GBP,
LAG(TRANSFER.ID) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_TRANSFER_ID, --LAG compares current record with the previous one
LAG(TRANSFER.STATE) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_STATE,
LAG(TRANSFER.DATE_CREATED) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_DATE_CREATED,
LAG(TRANSFER.SOURCE_CURRENCY) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_SOURCE_CURRENCY,
LAG(TRANSFER.TARGET_CURRENCY) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_TARGET_CURRENCY,
LAG(TRANSFER.SOURCE_VALUE) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_SOURCE_VALUE,
LAG(TRANSFER.TARGET_RECIPIENT_ID) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_TARGET_RECIPIENT_ID,
LAG(AMP.DEVICE) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_DEVICE,
LAG(TRANSFER.CLIENT_KEY) OVER (PARTITION BY TRANSFER.USER_PROFILE_ID ORDER BY DATE_CREATED) AS PREVIOUS_CLIENT_KEY,
CASE
    WHEN DATE(TRANSFER.DATE_CREATED) < (DATEADD('day',30,DATE(UPFSC.FIRST_SUCCESSFUL_SENDMONEY_TIME))) -- New user defined as user completing the current tx within 30 days of the first one.
        THEN 1
    ELSE 0
END AS IS_NEW_USER
FROM TRANSFER.TRANSFER
LEFT JOIN REPORTS.ACTION_META_PLATFORM AMP
    ON TRANSFER.ID = AMP.REQUEST_ID
LEFT JOIN REPORTS.REPORT_ACTION_STEP RAS
    ON RAS.REQUEST_ID = TRANSFER.ID
LEFT JOIN REPORTS.USER_PROFILE_FIRST_SUCCESSFUL_ACTIONS UPFSC
    ON UPFSC.USER_PROFILE_ID = RAS.USER_PROFILE_ID
WHERE TRUE
AND DATE(TRANSFER.DATE_CREATED) > '2022-01-01'
AND DATE(TRANSFER.DATE_CREATED) < (DATEADD('day', -14, CURRENT_DATE())) -- excluding recent tx's (2 weeks) as they may not be reconciled
--AND RAS.PRODUCT_TYPE = 'SENDMONEY'
ORDER BY TRANSFER.DATE_CREATED),

/* Processing data to ensure DEVICE and CLIENT_KEY ARE COMPARABLE */
PREVIOUS_PROCESSED_DATA AS (
SELECT *,
CASE
WHEN DEVICE = 'iOS' THEN  'transferwise_ios'
WHEN DEVICE = 'Android' THEN 'transferwise_android'
WHEN DEVICE = 'Desktop' THEN 'transferwise_web'
WHEN DEVICE = 'Mobile Web' THEN 'transferwise_web'
WHEN DEVICE = 'Desktop or Mobile Web' THEN 'Web (Desktop or Mobile)'
ELSE 'Unknown'
END AS DEVICE_FINAL,CASE
WHEN PREVIOUS_DEVICE = 'iOS' THEN  'transferwise_ios'
WHEN PREVIOUS_DEVICE = 'Android' THEN 'transferwise_android'
WHEN PREVIOUS_DEVICE = 'Desktop' THEN 'transferwise_web'
WHEN PREVIOUS_DEVICE = 'Mobile Web' THEN 'transferwise_web'
WHEN PREVIOUS_DEVICE = 'Desktop or Mobile Web' THEN 'Web (Desktop or Mobile)'
ELSE 'Unknown'
END AS PREVIOUS_DEVICE_FINAL
FROM PREVIOUS_DATA),

/* Computes total number of transfers per device category
COALESCE is used to get the device date based from multiple fields
*/

TOTAL_CANCEL_TX AS (
    SELECT COALESCE(DEVICE_FINAL,CLIENT_KEY,PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY) AS DEVICE,
    COUNT(DISTINCT ID) AS TOTAL_CANCEL_TX_COUNT
    FROM PREVIOUS_PROCESSED_DATA
    WHERE TRUE
    AND STATE IN ('CHARGEDBACK_WITHOUT_LOSS','CHARGEDBACK_WITH_LOSS','CANCELED_WITHOUT_REFUND','CANCELED_WITH_REFUND','BOUNCED_BACK','CANCEL_INITIATED')
    GROUP BY COALESCE(DEVICE_FINAL,CLIENT_KEY,PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY)
),

/* Identify fake transfers by comparing current transaction with the previous.
Device identification is a heuristic as some fields may not be populated
*/

FAKE_TX AS (SELECT COALESCE(DEVICE_FINAL,CLIENT_KEY,PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY) AS DEVICE,
                   COUNT(DISTINCT ID) AS FAKE_CANCEL_TX,
                   SUM(INVOICE_VALUE_GBP) AS AFFECTED_VOLUME,
                   SUM(IS_NEW_USER) AS NEW_USER
            FROM PREVIOUS_PROCESSED_DATA
WHERE TRUE AND SOURCE_CURRENCY = PREVIOUS_SOURCE_CURRENCY
AND SOURCE_VALUE BETWEEN PREVIOUS_SOURCE_VALUE * 0.98 AND PREVIOUS_SOURCE_VALUE * 1.02
AND TARGET_CURRENCY = PREVIOUS_TARGET_CURRENCY
AND TARGET_RECIPIENT_ID = PREVIOUS_TARGET_RECIPIENT_ID
AND STATE = 'TRANSFERRED'
AND PREVIOUS_STATE IN ('CHARGEDBACK_WITHOUT_LOSS','CHARGEDBACK_WITH_LOSS','CANCELED_WITHOUT_REFUND','CANCELED_WITH_REFUND','BOUNCED_BACK','CANCEL_INITIATED')
AND TIMESTAMPDIFF(MINUTES , PREVIOUS_DATE_CREATED,DATE_CREATED) < 60 -- heuristic
AND COALESCE(DEVICE_FINAL,CLIENT_KEY) = COALESCE(PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY)
-- AND COALESCE(DEVICE_FINAL,CLIENT_KEY,PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY)
--         IN ('transferwise_ios','transferwise_android','transferwise_web')
GROUP BY COALESCE(DEVICE_FINAL,CLIENT_KEY,PREVIOUS_DEVICE_FINAL,PREVIOUS_CLIENT_KEY))

SELECT *,(FAKE_CANCEL_TX/TOTAL_CANCEL_TX_COUNT)*100 FROM FAKE_TX
INNER JOIN TOTAL_CANCEL_TX
ON TOTAL_CANCEL_TX.DEVICE = FAKE_TX.DEVICE;

