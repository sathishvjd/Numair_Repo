/*
 Author: Numair Fazili
 Last Modified: 16/11/2022
 Description: Compute verification costs for receive INR customers
 */



/*
 Customers who created a business profile - START DATE 1 AUG 2022 (BETA LAUNCH DATE)
 */

SELECT
COUNT(DISTINCT user_profile.USER_PROFILE_ID)
FROM
    REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS user_profile
WHERE TRUE
AND UPPER(user_profile.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(user_profile.CUSTOMER_CLASS) = 'BUSINESS'
AND USER_PROFILE_CREATED >= '2022-11-01';




SELECT
COUNT(DISTINCT DA.PROFILE_ID)
FROM
    REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS user_profile
INNER JOIN DEPOSITACCOUNT.DEPOSIT_ACCOUNT  AS DA
    ON DA.profile_id = user_profile.USER_PROFILE_ID
INNER JOIN DEPOSITACCOUNT.BANK  AS DAB
    ON DAB.ID = DA.BANK_ID
WHERE TRUE
AND UPPER(user_profile.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(user_profile.CUSTOMER_CLASS) = 'BUSINESS'
AND DA.ALLOCATION_TIME >= '2022-08-01'
AND DA.ACTIVE = TRUE
AND DA.SETTLEMENT_TYPE = 'BALANCE'
AND DA.ACCOUNT_NUMBER IS NOT NULL

-- 3001 CUSTOMERS WITH ACCOUNT DETAILS





create or replace view SANDBOX_DB.SANDBOX_NUMAIR_FAZILI.VERIFIED_USER_PROFILES as (

--- THIS LOGIC IS USED TO COVER EDGE CASES WHERE RECEIVE_INR_OPEN_BANK_DETAILS RULE FAILS BUT THERE IS ONE RULE WITH THE SAME CASE ID WHICH PASSES - SO THE ASSUMPTION IS THAT THESE PROFILES ARE VERIFIED (TBC) - SAMPLE USER: 32368975

SELECT
DISTINCT VOD.PROFILE_ID
FROM
    ANALYTICS_DB.REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS user_profile
INNER JOIN ANALYTICS_DB.DEPOSITACCOUNT.DEPOSIT_ACCOUNT  AS DA
    ON DA.profile_id = user_profile.USER_PROFILE_ID
INNER JOIN ANALYTICS_DB.DEPOSITACCOUNT.BANK  AS DAB
    ON DAB.ID = DA.BANK_ID
INNER JOIN ANALYTICS_DB.REPORTS.VERIFICATION_ORCHESTRATOR_RULES_TRIGGERS_AGGREGATED AS VOD
                   ON user_profile.USER_PROFILE_ID = VOD.PROFILE_ID
WHERE TRUE
AND UPPER(user_profile.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(user_profile.CUSTOMER_CLASS) = 'BUSINESS'
AND DA.ALLOCATION_TIME >= '2022-08-01'
AND DA.ACCOUNT_NUMBER IS NOT NULL
AND DA.ACTIVE = TRUE
AND DA.SETTLEMENT_TYPE = 'BALANCE'
GROUP BY VOD.PROFILE_ID,CHECK_ID
HAVING MAX( CASE  FAILED_RULE_NAME WHEN 'RECEIVE_INR_OPEN_BANK_DETAILS' THEN 1 ELSE 0 END ) = 1
AND MAX( CASE  FINAL_CHECK_STATE WHEN 'PASSED' THEN 1 ELSE 0 END ) = 1

UNION

SELECT
DISTINCT VOD.PROFILE_ID
FROM
    ANALYTICS_DB.REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS user_profile
INNER JOIN ANALYTICS_DB.DEPOSITACCOUNT.DEPOSIT_ACCOUNT  AS DA
    ON DA.profile_id = user_profile.USER_PROFILE_ID
INNER JOIN ANALYTICS_DB.DEPOSITACCOUNT.BANK  AS DAB
    ON DAB.ID = DA.BANK_ID
INNER JOIN ANALYTICS_DB.REPORTS.VERIFICATION_ORCHESTRATOR_RULES_TRIGGERS_AGGREGATED AS VOD
                   ON user_profile.USER_PROFILE_ID = VOD.PROFILE_ID
WHERE TRUE
AND UPPER(user_profile.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(user_profile.CUSTOMER_CLASS) = 'BUSINESS'
AND DA.ALLOCATION_TIME >= '2022-08-01'
AND DA.ACCOUNT_NUMBER IS NOT NULL
AND DA.ACTIVE = TRUE
AND DA.SETTLEMENT_TYPE = 'BALANCE'
AND VOD.LAST_STAGE_RULE_NAME = 'RECEIVE_INR_OPEN_BANK_DETAILS'
AND VOD.LAST_STAGE_RULE_STATUS = 'PASSED');

--2980 - 21 RECORDS MISSING THESE RECORDS HAVE ACCOUNT DETAILS ISSUED BUT ARE NOT VERIFIED

SELECT VERIFICATION_METHOD,COUNT(DISTINCT VUC.USER_PROFILE_ID),SUM((TOTAL_COST_WITH_OVERHEAD)) AS TOTAL_COST
FROM SANDBOX_DB.SANDBOX_NUMAIR_FAZILI.VERIFIED_USER_PROFILES VUP
INNER JOIN ANALYTICS_DB.REPORTS.VERIFICATION_USER_COST AS VUC
    ON VUC.USER_PROFILE_ID = VUP.PROFILE_ID
WHERE TRUE
GROUP BY VERIFICATION_METHOD;
-- OUT OF 2980 VERIFIED PROFILES ONLY 633 HAVE COST DATA AVAILABLE

SELECT VERIFICATION_METHOD,COUNT(DISTINCT VUC.USER_PROFILE_ID)
FROM REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS RUPC
INNER JOIN REPORTS.VERIFICATION_USER_COST VUC
    ON RUPC.USER_PROFILE_ID = VUC.USER_PROFILE_ID
INNER JOIN ANALYTICS_DB.REPORTS.VERIFICATION_ORCHESTRATOR_RULES_TRIGGERS_AGGREGATED AS VOD
                   ON RUPC.USER_PROFILE_ID = VOD.PROFILE_ID
WHERE TRUE
AND UPPER(RUPC.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(RUPC.CUSTOMER_CLASS) = 'BUSINESS'
AND VUC.VERIFICATION_TIMESTAMP >= '2022-08-01'
GROUP BY 1;

SELECT DISTINCT VUC.USER_PROFILE_ID
FROM REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS RUPC
INNER JOIN REPORTS.VERIFICATION_USER_COST VUC
    ON RUPC.USER_PROFILE_ID = VUC.USER_PROFILE_ID
WHERE TRUE
AND UPPER(RUPC.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(RUPC.CUSTOMER_CLASS) = 'BUSINESS'
AND VUC.VERIFICATION_TIMESTAMP >= '2022-08-01'

EXCEPT

SELECT VUC.USER_PROFILE_ID
FROM SANDBOX_DB.SANDBOX_NUMAIR_FAZILI.VERIFIED_USER_PROFILES VUP
INNER JOIN ANALYTICS_DB.REPORTS.VERIFICATION_USER_COST AS VUC
    ON VUC.USER_PROFILE_ID = VUP.PROFILE_ID
WHERE TRUE;



SELECT COUNT(DISTINCT CE.USER_PROFILE_ID),SUM(COGS_TOTAL),SUM(SERVICING_COST_TOTAL),SUM(CS_COST)
FROM SANDBOX_DB.SANDBOX_NUMAIR_FAZILI.VERIFIED_USER_PROFILES VUP
INNER JOIN ANALYTICS_DB.REPORTS.CUSTOMER_ECON_DATASET_PUBLIC AS CE
    ON CE.USER_PROFILE_ID = VUP.PROFILE_ID
WHERE TRUE;
-- OUT OF 2860 VERIFIED PROFILES ONLY 744 HAVE CUSTOMER ECONOMIC DATA AVAILABLE



WITH PROFILE_DETAILS AS (
SELECT
DA.PROFILE_ID,COUNT(ACCOUNT_NUMBER) AS NUM_ACCOUNTS,MIN(DATE_TRUNC('month',user_profile.USER_PROFILE_CREATED)) as PROFILE_CREATED_DATE,MIN(DATE_TRUNC('month',DA.ALLOCATION_TIME)) as FIRST_ACCOUNT_ALLOCATION_DATE
FROM
    REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS user_profile
INNER JOIN DEPOSITACCOUNT.DEPOSIT_ACCOUNT  AS DA
    ON DA.profile_id = user_profile.USER_PROFILE_ID
INNER JOIN DEPOSITACCOUNT.BANK  AS DAB
    ON DAB.ID = DA.BANK_ID
WHERE TRUE
AND UPPER(user_profile.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(user_profile.CUSTOMER_CLASS) = 'BUSINESS'
AND DA.ALLOCATION_TIME >= '2022-08-01'
AND DA.ACTIVE = TRUE
AND DA.SETTLEMENT_TYPE = 'BALANCE'
AND DA.ACCOUNT_NUMBER IS NOT NULL
AND DA.PROFILE_ID IN (SELECT VUP.PROFILE_ID FROM SANDBOX_DB.SANDBOX_NUMAIR_FAZILI.VERIFIED_USER_PROFILES VUP)
GROUP BY 1
)

-- SELECT PD.FIRST_ACCOUNT_ALLOCATION_DATE,COUNT(DISTINCT RAS.USER_PROFILE_ID) AS NUM_CUSTOMERS,COUNT(ACTION_ID) AS NUM_TX,CAST(SUM(INVOICE_VALUE_GBP)/1000 AS INT) AS VOLUME_TRANSACTED_K
-- FROM PROFILE_DETAILS PD
-- INNER JOIN REPORTS.REPORT_ACTION_STEP RAS
-- ON RAS.USER_PROFILE_ID = PD.PROFILE_ID
-- WHERE TRUE
-- AND SOURCE_CURRENCY!=TARGET_CURRENCY
-- AND SOURCE_CURRENCY IN ('USD','GBP','EUR')
-- AND TARGET_CURRENCY = 'INR'
-- AND FLAG_FOR_AGGREGATIONS=1
-- GROUP BY rollup (1)
-- ORDER BY 1;


SELECT COUNT(ACTION_ID),COUNT_IF(FLAG_FOR_AGGREGATIONS = 1),COUNT_IF(SUCCESSFUL_ACTION = 0)
FROM PROFILE_DETAILS PD
INNER JOIN REPORTS.REPORT_ACTION_STEP RAS
ON RAS.USER_PROFILE_ID = PD.PROFILE_ID
WHERE TRUE
AND SOURCE_CURRENCY!=TARGET_CURRENCY
AND SOURCE_CURRENCY IN ('USD','GBP','EUR')
AND TARGET_CURRENCY = 'INR'
ORDER BY 1;



/*
 Purpose: Get high level costs for receive INR initiative
 */
SELECT COUNT(DISTINCT CE.USER_PROFILE_ID),SUM(NET_REVENUE_GBP),SUM(COGS_TOTAL),SUM(SERVICING_COST_TOTAL),SUM(CS_COST),SUM(VERIFICATION)
FROM REPORTS.REGIONAL_USER_PROFILE_CHARACTERISTICS AS UP
INNER JOIN REPORTS.CUSTOMER_ECON_DATASET_PUBLIC CE
    ON CE.USER_PROFILE_ID = UP.USER_PROFILE_ID
WHERE TRUE
AND UPPER(UP.COUNTRY_CODE_3_CHAR) = 'IND'
AND UPPER(UP.CUSTOMER_CLASS) = 'BUSINESS'
AND UPPER(UP.USER_PROFILE_CREATED) >= '2022-01-01'
AND UPPER(CE.PERIOD_START) >= '2022-08-01'

