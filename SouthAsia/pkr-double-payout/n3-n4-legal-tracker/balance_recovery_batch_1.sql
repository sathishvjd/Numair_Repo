
/*
 Author: Numair Fazili
 Description: The following query is used to track recoveries via balance reservations for affected transfers in N3/N4 category to whom legal letters were sent on 1st December 2022
 */


WITH CTE AS (
    SELECT DISTINCT PMT.TRANSFER_ID,COALESCE(PCL.PAYOUT_CLASSIFICATION,PMT.PAYOUT_CLASSIFICATION) AS TRANSFER_STATE
    FROM REPORTS.PKR_DOUBLE_PAYOUT_MASTER_TABLE PMT
    LEFT JOIN  REPORTS.PKR_DOUBLE_PAYOUT_CHANGE_LOG PCL ON PCL.TRANSFER_ID = PMT.TRANSFER_ID

),

MAIN_TABLE AS (SELECT
DISTINCT CTE.TRANSFER_ID AS TRANSFER_ID,
LAST_VALUE(CTE.TRANSFER_STATE) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS TRANSFER_STATE,
LAST_VALUE(WI.STATE) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS WORK_ITEM_STATE,
LAST_VALUE(SOURCE_CURRENCY) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS SOURCE_CURRENCY,
LAST_VALUE(TARGET_CURRENCY) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS TARGET_CURRENCY,
LAST_VALUE(INVOICE_VALUE_LOCAL) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS AMOUNT_IN_SOURCE_CCY,
LAST_VALUE(FEE_VALUE_LOCAL) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS FEES_IN_SOURCE_CCY,
LAST_VALUE(INVOICE_VALUE_GBP) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS AMOUNT_IN_GBP,
LAST_VALUE(WI.LAST_UPDATED ) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS LAST_UPDATED,
LAST_VALUE(PKRC.CATEGORY) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS CATEGORY,
LAST_VALUE(PKRC.NOTIFICATION_CATEGORY) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS NOTIFICATION_CATEGORY,
LAST_VALUE(PKRC.PAYIN_CHANNEL) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS PAYIN_CHANNEL,
LAST_VALUE(RAS.USER_PROFILE_ID) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS USER_PROFILE_ID,
LAST_VALUE(RAS.USER_ID) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS USER_ID,
LAST_VALUE(IFF(WI.STATE = 'CLOSED',WI.LAST_UPDATED,NULL) ) OVER (PARTITION BY CTE.TRANSFER_ID ORDER BY LAST_UPDATED) AS DATE_CLOSED
FROM CTE
         INNER JOIN FX.WORK_ITEM WI ON WI.REQUEST_ID = CTE.TRANSFER_ID
         INNER JOIN REPORTS.REPORT_ACTION_STEP RAS ON RAS.REQUEST_ID = CTE.TRANSFER_ID
         LEFT JOIN  REPORTS.PKR_DOUBLE_PAYOUT_CLASSIFICATION PKRC ON PKRC.TRANSFER_ID = CTE.TRANSFER_ID

WHERE TRUE
 AND RAS.NOT_DUPLICATE = 1
 AND WI.TYPE = 'PROBLEMATIC_OOPS'
 AND CTE.TRANSFER_STATE = 'DPO'),
/*
 FETCHED USER PROFILES FROM SPREADSHEET -- FOR CONSISTENCY AS SOME BALANCES WERE CHANGED
 */

BALANCE_CHECK AS (
    SELECT USER_PROFILE_ID AS PROFILE_ID,
        CASE
            WHEN USER_PROFILE_ID IN (27389812,12669441,22192697,4421584,10607947,22890726,21038055,28996105,13056653,21314088,4032811,24929356,
                                     13983231,10387648,4950149,18307520,15816156,26112931,25253669,6984323,32294651,12574037,22115437,29115373,
                                     15759843,27282743,31841648,19754558,822613,14874273,32034581,1568441,14043824,4686776,24596756,19512849,15009712,
                                     30526742,12322750,8871976,19801361,16469918,23665024,17649532,13505410,32561274,31499739,29359079,7184156,19975232,
                                     15266861,6973709,18640108,5696887,17174145,14870939,13644876,19801361,28735898,31499739,1834460,2091935,15090444,24674294,
                                     26671955,27282959,26412526,14613397,19647928,21102721,6792712,22060897,5603548,26468769,13469966,14707323,7982093,27898140,13320598,
                                     7550108,24775875,5006749,18506026,2040406,2040406,24930387,2040406,21572707,26059220,24184316,5367369,1834460,10811803,24765118,17931902,
                                     15231511,28802219,16172619,18129288,7508667,17421736,19250424,13871661,11557076,8821372,31980872,1569834,7979192,13043611,20085914,29444540,
                                     18832599,29358657,32601790,19801361,6344028,29371623,15970945,7504628,17239046,30504143,28342178,32605150,21088212,19119254,13360273,6756634,
                                     27282959,9903225,15945344,27801306,24889972,20233589,27137584,26649308,25479574,12669441,19069041,21235184,25874626,32606268,27600290,15232155,
                                     24903273,12433369,14670004,20440214,26403151,17882610,23062142,1967665,18447296,19894193,5928505,5928505,6939499,31057360,13354265,23037629,13727153,
                                     18161581,17895175,23335672,17522157,4830129,6597266,25919154,1834460,19801361,20015032,29185923,30086825,30086825,32630768,6209000,16247097,30165254,
                                     6887614,30386714,16787776,2022849,16469918,31269492,19145283,26013634,14122405,4138377,15479812,10420505,19268760,5554189,25629636,21651831,30757290,4616320,
                                     14597818,12845224,20730006,16596260,1569834,32646178) THEN FALSE
        ELSE TRUE
    END AS BALANCE_RESERVATION
        FROM MAIN_TABLE
    GROUP BY 1
),

-- FOR USERS WITH MULTIPLE TX

-- GET EOD BALANCE

GET_LATEST_BALANCE AS (
SELECT
    RBHBP.PROFILE_ID as GET_BALANCE_PROFILE_ID,
    AMOUNT_CURRENCY AS BALANCE_CURRENCY,
    SUM(LOCAL_BALANCE_END_OF_DAY) AS BALANCE_AMOUNT,
    SUM(GBP_BALANCE_END_OF_DAY) AS BALANCE_GBP
FROM REPORTS.REPORT_BORDERLESS_HISTORIC_BALANCES_PROFILES RBHBP
where TRUE
AND PROFILE_ID IN (SELECT BALANCE_CHECK.PROFILE_ID FROM BALANCE_CHECK WHERE BALANCE_RESERVATION = TRUE)
AND DATE_BALANCE = CURRENT_DATE() - 1
GROUP BY 1,2
),

GET_PRIOR_LEGAL_BALANCE AS (
SELECT
    RBHBP.PROFILE_ID as GET_BALANCE_PROFILE_ID,
    AMOUNT_CURRENCY AS BALANCE_CURRENCY,
    SUM(LOCAL_BALANCE_END_OF_DAY) AS BALANCE_AMOUNT,
    SUM(GBP_BALANCE_END_OF_DAY) AS BALANCE_GBP
FROM REPORTS.REPORT_BORDERLESS_HISTORIC_BALANCES_PROFILES RBHBP
where TRUE
AND PROFILE_ID IN (SELECT BALANCE_CHECK.PROFILE_ID FROM BALANCE_CHECK WHERE BALANCE_RESERVATION = TRUE)
AND DATE_BALANCE = '2022-12-01'
GROUP BY 1,2
),


CREATE_LATEST_BALANCE_VIEW AS (SELECT
MAIN_TABLE.USER_PROFILE_ID,
SOURCE_CURRENCY,
SUM(AMOUNT_IN_SOURCE_CCY) AS AMOUNT_IN_SOURCE_CCY,
SUM(AMOUNT_IN_GBP) AS AMOUNT_IN_GBP,
MAX(BALANCE_AMOUNT) AS BALANCE_AMOUNT,
MAX(BALANCE_GBP) AS BALANCE_GBP,
COUNT(TRANSFER_ID) AS COUNT_TX,
LISTAGG(WORK_ITEM_STATE,',') AS WORK_ITEM_STATES,
IFF(MAX(BALANCE_GBP) < 0, SUM(AMOUNT_IN_GBP) + MAX(BALANCE_GBP),NULL) AS BALANCE_PAID_GBP,
'LATEST' AS TYPE
FROM MAIN_TABLE
    LEFT JOIN GET_LATEST_BALANCE ON GET_LATEST_BALANCE.GET_BALANCE_PROFILE_ID = MAIN_TABLE.USER_PROFILE_ID AND GET_LATEST_BALANCE.BALANCE_CURRENCY = MAIN_TABLE.SOURCE_CURRENCY
WHERE TRUE
AND USER_PROFILE_ID IN (SELECT BALANCE_CHECK.PROFILE_ID FROM BALANCE_CHECK WHERE BALANCE_RESERVATION = TRUE)
AND CATEGORY IN ('N4','N3')
AND ((DATE_CLOSED IS NULL) OR (DATE_CLOSED >= '2022-12-01'))
AND AMOUNT_IN_GBP > 800
GROUP BY 1,2),


CREATE_PRIOR_BALANCE_VIEW AS (SELECT
MAIN_TABLE.USER_PROFILE_ID,
SOURCE_CURRENCY,
SUM(AMOUNT_IN_SOURCE_CCY) AS AMOUNT_IN_SOURCE_CCY,
SUM(AMOUNT_IN_GBP) AS AMOUNT_IN_GBP,
MAX(BALANCE_AMOUNT) AS BALANCE_AMOUNT,
MAX(BALANCE_GBP) AS BALANCE_GBP,
COUNT(TRANSFER_ID) AS COUNT_TX,
LISTAGG(WORK_ITEM_STATE,',') AS WORK_ITEM_STATES,
IFF(MAX(BALANCE_GBP) < 0, SUM(AMOUNT_IN_GBP) + MAX(BALANCE_GBP),NULL) AS BALANCE_PAID_GBP,
'PRIOR_LEGAL' AS TYPE
FROM MAIN_TABLE
    LEFT JOIN GET_PRIOR_LEGAL_BALANCE ON GET_PRIOR_LEGAL_BALANCE.GET_BALANCE_PROFILE_ID = MAIN_TABLE.USER_PROFILE_ID AND GET_PRIOR_LEGAL_BALANCE.BALANCE_CURRENCY = MAIN_TABLE.SOURCE_CURRENCY
WHERE TRUE
AND USER_PROFILE_ID IN (SELECT BALANCE_CHECK.PROFILE_ID FROM BALANCE_CHECK WHERE BALANCE_RESERVATION = TRUE)
AND CATEGORY IN ('N4','N3')
AND ((DATE_CLOSED IS NULL) OR (DATE_CLOSED >= '2022-12-01'))
AND AMOUNT_IN_GBP > 800
GROUP BY 1,2),


TEMP_TABLE AS (

    (SELECT * FROM CREATE_LATEST_BALANCE_VIEW) UNION ALL (SELECT * FROM CREATE_PRIOR_BALANCE_VIEW)

)


SELECT
TYPE,
CASE
    WHEN BALANCE_AMOUNT >= 0 THEN 'RECOVERED'
    WHEN BALANCE_AMOUNT < 0 AND ABS(BALANCE_AMOUNT) > ABS(AMOUNT_IN_SOURCE_CCY) THEN 'UNKNOWN_STATE'
    WHEN (AMOUNT_IN_SOURCE_CCY - ABS(BALANCE_AMOUNT))/AMOUNT_IN_SOURCE_CCY  > 0.1 THEN 'PARTIAL_RECOVERY'
    ELSE 'NO_RECOVERY'
END AS BALANCE_RECOVERY_STATE,
    ROUND(SUM(AMOUNT_IN_GBP)) AS AFFECTED_AMOUNT_GBP,
    IFF(SUM(BALANCE_GBP) < 0,ROUND(SUM(BALANCE_GBP)),0) AS REMAINING_BALANCE_GBP,
    ROUND(COALESCE(SUM(BALANCE_PAID_GBP),SUM(AMOUNT_IN_GBP))) AS AMOUNT_PAID_GBP,
    SUM(COUNT_TX) AS NUM_TRANSFERS,
    COUNT(DISTINCT USER_PROFILE_ID) AS COUNT_PROFILES,
    ANY_VALUE(CONCAT(USER_PROFILE_ID,'-',SOURCE_CURRENCY,'-',AMOUNT_IN_GBP)) AS SAMPLE_USE_CASE_USER_CCY_AFFAMTGBP,
    LISTAGG(USER_PROFILE_ID,',') AS LIST_PROFILES
FROM TEMP_TABLE
GROUP BY 1,2 ORDER BY 1